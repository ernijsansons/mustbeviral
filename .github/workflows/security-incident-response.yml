name: Security Incident Response

on:
  workflow_dispatch:
    inputs:
      incident_type:
        description: 'Type of security incident'
        required: true
        type: choice
        options:
          - vulnerability-detected
          - security-breach
          - compliance-violation
          - emergency-rollback
      severity:
        description: 'Incident severity level'
        required: true
        type: choice
        options:
          - critical
          - high
          - medium
          - low
      description:
        description: 'Incident description'
        required: true
        type: string

env:
  NODE_VERSION: '20.x'

jobs:
  security-incident-response:
    name: Security Incident Response
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log incident
      run: |
        echo "=== SECURITY INCIDENT RESPONSE ==="
        echo "Type: ${{ github.event.inputs.incident_type }}"
        echo "Severity: ${{ github.event.inputs.severity }}"
        echo "Description: ${{ github.event.inputs.description }}"
        echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "Triggered by: ${{ github.actor }}"
        echo "=================================="

    - name: Emergency assessment
      if: github.event.inputs.severity == 'critical'
      run: |
        echo "üö® CRITICAL SECURITY INCIDENT DETECTED"
        echo "Initiating emergency response procedures..."

        # Disable auto-deployments
        echo "AUTO_DEPLOY_DISABLED=true" >> $GITHUB_ENV

    - name: Immediate rollback (Critical incidents)
      if: github.event.inputs.incident_type == 'emergency-rollback' && github.event.inputs.severity == 'critical'
      run: |
        echo "üö® INITIATING EMERGENCY ROLLBACK"

        # Get last known good deployment
        LAST_GOOD_COMMIT=$(git log --format="%H" --grep="production deployment successful" -n 1)

        if [ -z "$LAST_GOOD_COMMIT" ]; then
          echo "::error::No last known good deployment found"
          exit 1
        fi

        echo "Rolling back to commit: $LAST_GOOD_COMMIT"

        # Checkout last good commit
        git checkout $LAST_GOOD_COMMIT

        # Deploy emergency rollback
        npm ci --ignore-scripts
        cd mustbeviral && npm ci --ignore-scripts --legacy-peer-deps
        npm run build
        npm run cloudflare:deploy:production
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Security scan post-incident
      run: |
        echo "Running post-incident security scan..."

        # Setup Node.js
        npm ci --ignore-scripts
        cd mustbeviral && npm ci --ignore-scripts --legacy-peer-deps

        # Install security tools
        npm install -g snyk@latest audit-ci@latest retire@latest

        # Run comprehensive security scan
        echo "## Security Scan Results" > security-incident-report.md
        echo "Incident: ${{ github.event.inputs.incident_type }}" >> security-incident-report.md
        echo "Severity: ${{ github.event.inputs.severity }}" >> security-incident-report.md
        echo "Time: $(date)" >> security-incident-report.md
        echo "" >> security-incident-report.md

        # npm audit
        echo "### NPM Audit Results" >> security-incident-report.md
        npm audit --audit-level=moderate >> security-incident-report.md || true
        echo "" >> security-incident-report.md

        # Snyk scan (if token available)
        if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "### Snyk Scan Results" >> security-incident-report.md
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test >> security-incident-report.md || true
          echo "" >> security-incident-report.md
        fi

        # Retire.js scan
        echo "### Vulnerable Libraries (Retire.js)" >> security-incident-report.md
        retire --path . >> security-incident-report.md || true

    - name: Generate incident report
      run: |
        echo "# Security Incident Report" > incident-summary.md
        echo "" >> incident-summary.md
        echo "**Incident ID:** SEC-$(date +%Y%m%d-%H%M%S)" >> incident-summary.md
        echo "**Type:** ${{ github.event.inputs.incident_type }}" >> incident-summary.md
        echo "**Severity:** ${{ github.event.inputs.severity }}" >> incident-summary.md
        echo "**Description:** ${{ github.event.inputs.description }}" >> incident-summary.md
        echo "**Reported by:** ${{ github.actor }}" >> incident-summary.md
        echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> incident-summary.md
        echo "" >> incident-summary.md

        echo "## Response Actions Taken" >> incident-summary.md
        if [ "${{ github.event.inputs.severity }}" == "critical" ]; then
          echo "- ‚úÖ Auto-deployments disabled" >> incident-summary.md
        fi
        if [ "${{ github.event.inputs.incident_type }}" == "emergency-rollback" ]; then
          echo "- ‚úÖ Emergency rollback initiated" >> incident-summary.md
        fi
        echo "- ‚úÖ Security scan completed" >> incident-summary.md
        echo "- ‚úÖ Incident report generated" >> incident-summary.md
        echo "" >> incident-summary.md

        echo "## Next Steps" >> incident-summary.md
        echo "1. Review security scan results" >> incident-summary.md
        echo "2. Address identified vulnerabilities" >> incident-summary.md
        echo "3. Implement additional security measures" >> incident-summary.md
        echo "4. Update security documentation" >> incident-summary.md
        echo "5. Re-enable auto-deployments when safe" >> incident-summary.md

    - name: Notify security team
      if: github.event.inputs.severity == 'critical' || github.event.inputs.severity == 'high'
      run: |
        echo "üö® SECURITY INCIDENT NOTIFICATION"
        echo "A ${{ github.event.inputs.severity }} severity security incident has been reported"
        echo "Type: ${{ github.event.inputs.incident_type }}"
        echo "Description: ${{ github.event.inputs.description }}"
        echo ""
        echo "Incident response workflow has been triggered."
        echo "Review the generated reports and take appropriate action."

    - name: Upload incident artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-incident-${{ github.run_number }}
        path: |
          incident-summary.md
          security-incident-report.md

    - name: Create security issue
      if: github.event.inputs.severity == 'critical' || github.event.inputs.severity == 'high'
      uses: actions/github-script@v7
      with:
        script: |
          const incidentId = `SEC-${new Date().toISOString().slice(0,10).replace(/-/g,'')}-${Date.now().toString().slice(-6)}`;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Security Incident: ${{ github.event.inputs.incident_type }} (${{ github.event.inputs.severity }})`,
            body: `## Security Incident Report

**Incident ID:** ${incidentId}
**Type:** ${{ github.event.inputs.incident_type }}
**Severity:** ${{ github.event.inputs.severity }}
**Reported by:** ${{ github.actor }}
**Timestamp:** ${new Date().toISOString()}

### Description
${{ github.event.inputs.description }}

### Response Actions Taken
- Security incident response workflow triggered
- Comprehensive security scan completed
- Incident artifacts generated and uploaded

### Artifacts
- Incident Summary Report
- Security Scan Results
- Available in workflow run #${{ github.run_number }}

### Next Steps
1. Review security scan results
2. Address identified vulnerabilities
3. Implement additional security measures
4. Update security documentation
5. Close this issue when resolved

**This issue was automatically created by the Security Incident Response workflow.**`,
            labels: ['security', 'incident', '${{ github.event.inputs.severity }}']
          });

  post-incident-verification:
    name: Post-Incident Verification
    needs: security-incident-response
    runs-on: ubuntu-latest
    if: github.event.inputs.incident_type == 'emergency-rollback'

    steps:
    - name: Verify rollback success
      run: |
        echo "Verifying emergency rollback success..."

        # Wait for deployment to stabilize
        sleep 60

        # Check production health
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://mustbeviral.com/health || echo "000")

        if [ "$HEALTH_STATUS" == "200" ]; then
          echo "‚úÖ Production health check passed"
        else
          echo "‚ùå Production health check failed (HTTP $HEALTH_STATUS)"
          echo "::error::Emergency rollback verification failed"
          exit 1
        fi

        # Verify security headers are present
        SECURITY_HEADERS=$(curl -sI https://mustbeviral.com | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)" | wc -l)

        if [ "$SECURITY_HEADERS" -ge 2 ]; then
          echo "‚úÖ Security headers verification passed"
        else
          echo "‚ö†Ô∏è  Some security headers missing"
        fi

        echo "Emergency rollback verification completed"
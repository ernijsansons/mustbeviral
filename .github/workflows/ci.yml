name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite (${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install root dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          npm install --ignore-scripts
        fi

    - name: Install mustbeviral dependencies
      run: |
        cd mustbeviral
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts --legacy-peer-deps
        else
          npm install --ignore-scripts --legacy-peer-deps
        fi

    - name: Run dependency check
      run: npm run deps:check
      continue-on-error: true

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install root dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          npm install --ignore-scripts
        fi

    - name: Install mustbeviral dependencies
      run: |
        cd mustbeviral
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts --legacy-peer-deps
        else
          npm install --ignore-scripts --legacy-peer-deps
        fi

    - name: Run security audit
      run: npm run security:audit
      continue-on-error: true

  build:
    name: Build Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install root dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          npm install --ignore-scripts
        fi

    - name: Install mustbeviral dependencies
      run: |
        cd mustbeviral
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts --legacy-peer-deps
        else
          npm install --ignore-scripts --legacy-peer-deps
        fi

    - name: Build application
      run: npm run build

  deploy-staging:
    name: Deploy to Staging
    needs: [test, security, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          npm install --ignore-scripts
        fi
        cd mustbeviral
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts --legacy-peer-deps
        else
          npm install --ignore-scripts --legacy-peer-deps
        fi

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Build for staging
      run: npm run build
      env:
        NODE_ENV: staging

    - name: Deploy to Cloudflare (Staging)
      run: npm run cloudflare:deploy:staging
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Run health checks
      run: cd mustbeviral && node scripts/health-check.js check staging
      continue-on-error: true

    - name: Notify deployment status
      if: always()
      run: echo "Staging deployment completed with status: ${{ job.status }}"

  deploy-production:
    name: Deploy to Production
    needs: [test, security, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          npm install --ignore-scripts
        fi
        cd mustbeviral
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts --legacy-peer-deps
        else
          npm install --ignore-scripts --legacy-peer-deps
        fi

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production

    - name: Run database migrations
      run: |
        chmod +x database/scripts/migrate.sh
        ./database/scripts/migrate.sh production false true
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Deploy to Cloudflare (Production)
      run: npm run cloudflare:deploy:production
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Run health checks
      run: cd mustbeviral && node scripts/health-check.js check production

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        cd mustbeviral && node scripts/rollback.js rollback production
      env:
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Notify deployment status
      if: always()
      run: echo "Production deployment completed with status: ${{ job.status }}"
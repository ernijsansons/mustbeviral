#!/bin/bash

# Pre-commit hook for Must Be Viral V2
# Ensures code quality and prevents bad commits

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Not in a git repository${NC}"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No staged files to check${NC}"
    exit 0
fi

# Check for sensitive files
echo -e "${BLUE}üîê Checking for sensitive files...${NC}"
SENSITIVE_PATTERNS=(
    "\.env$"
    "\.env\."
    "\.pem$"
    "\.key$"
    "\.crt$"
    "\.p12$"
    "\.pfx$"
    "secrets/"
    "\.secrets/"
    "\.secret$"
    "\.private$"
    "id_rsa"
    "id_dsa"
    "id_ecdsa"
    "id_ed25519"
)

for file in $STAGED_FILES; do
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if echo "$file" | grep -E "$pattern" > /dev/null; then
            echo -e "${RED}‚ùå Sensitive file detected: $file${NC}"
            echo -e "${RED}   This file should not be committed to the repository${NC}"
            exit 1
        fi
    done
done

# Check for large files
echo -e "${BLUE}üìè Checking for large files...${NC}"
MAX_FILE_SIZE=10485760  # 10MB

for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
        if [ "$file_size" -gt "$MAX_FILE_SIZE" ]; then
            echo -e "${RED}‚ùå Large file detected: $file (${file_size} bytes)${NC}"
            echo -e "${RED}   Files larger than 10MB should not be committed${NC}"
            exit 1
        fi
    fi
done

# Check for merge conflict markers
echo -e "${BLUE}üîÄ Checking for merge conflict markers...${NC}"
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        if grep -E "^<<<<<<< |^======= |^>>>>>>> " "$file" > /dev/null; then
            echo -e "${RED}‚ùå Merge conflict markers found in: $file${NC}"
            exit 1
        fi
    fi
done

# Run linting for JavaScript/TypeScript files
echo -e "${BLUE}üîß Running linting...${NC}"
JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ -n "$JS_FILES" ]; then
    # Check if eslint is available
    if command -v eslint > /dev/null 2>&1; then
        echo "$JS_FILES" | xargs eslint --max-warnings 0 || {
            echo -e "${RED}‚ùå ESLint found issues${NC}"
            exit 1
        }
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ESLint not found, skipping linting${NC}"
    fi
fi

# Run type checking for TypeScript files
echo -e "${BLUE}üìù Running type checking...${NC}"
TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx)$' || true)

if [ -n "$TS_FILES" ]; then
    # Check if tsc is available
    if command -v tsc > /dev/null 2>&1; then
        tsc --noEmit || {
            echo -e "${RED}‚ùå TypeScript found type errors${NC}"
            exit 1
        }
    else
        echo -e "${YELLOW}‚ö†Ô∏è  TypeScript compiler not found, skipping type checking${NC}"
    fi
fi

# Run formatting check
echo -e "${BLUE}üé® Checking code formatting...${NC}"
if command -v prettier > /dev/null 2>&1; then
    echo "$STAGED_FILES" | xargs prettier --check || {
        echo -e "${RED}‚ùå Code formatting issues found${NC}"
        echo -e "${YELLOW}üí° Run 'prettier --write' to fix formatting issues${NC}"
        exit 1
    }
else
    echo -e "${YELLOW}‚ö†Ô∏è  Prettier not found, skipping formatting check${NC}"
fi

# Check for TODO/FIXME comments in production code
echo -e "${BLUE}üìã Checking for TODO/FIXME comments...${NC}"
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        if grep -E "(TODO|FIXME|HACK|XXX)" "$file" > /dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  TODO/FIXME comment found in: $file${NC}"
            # Don't fail the commit, just warn
        fi
    fi
done

# Check commit message format (if this is a commit, not a merge)
if [ "$1" != "merge" ]; then
    echo -e "${BLUE}üìù Checking commit message format...${NC}"
    COMMIT_MSG_FILE="$1"
    
    if [ -f "$COMMIT_MSG_FILE" ]; then
        COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")
        
        # Check for conventional commit format
        if ! echo "$COMMIT_MSG" | grep -E "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+" > /dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Commit message doesn't follow conventional commit format${NC}"
            echo -e "${YELLOW}   Format: type(scope): description${NC}"
            echo -e "${YELLOW}   Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert${NC}"
            # Don't fail the commit, just warn
        fi
        
        # Check for minimum length
        if [ ${#COMMIT_MSG} -lt 10 ]; then
            echo -e "${RED}‚ùå Commit message too short (minimum 10 characters)${NC}"
            exit 1
        fi
    fi
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
exit 0








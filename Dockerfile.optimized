# Multi-stage Dockerfile for Production Optimization
# Designed for minimal image size, security, and performance

# ===================================
# Stage 1: Base Image with Dependencies
# ===================================
FROM node:20-alpine3.19 AS base

# Security updates and essential packages
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache \
    dumb-init \
    tini \
    curl \
    ca-certificates \
    tzdata \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001 -G nodejs \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Performance environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    NODE_OPTIONS="--max-old-space-size=2048 --optimize-for-size --use-openssl-ca" \
    UV_THREADPOOL_SIZE=16 \
    MALLOC_ARENA_MAX=2 \
    TZ=UTC \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

WORKDIR /app
RUN chown -R nextjs:nodejs /app

# ===================================
# Stage 2: Dependencies Installation
# ===================================
FROM base AS deps

WORKDIR /app

# Copy package files for root dependencies
COPY --chown=nextjs:nodejs package*.json ./

# Install root dependencies
RUN npm ci --omit=dev --no-audit --no-fund --prefer-offline --progress=false && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/tmp/*

# Copy and install mustbeviral dependencies
COPY --chown=nextjs:nodejs mustbeviral/package*.json ./mustbeviral/
WORKDIR /app/mustbeviral

RUN npm ci --omit=dev --no-audit --no-fund --prefer-offline --progress=false --legacy-peer-deps && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/tmp/* && \
    find node_modules -name "*.md" -delete && \
    find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || true

# ===================================
# Stage 3: Build Stage
# ===================================
FROM base AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nextjs:nodejs /app/mustbeviral/node_modules ./mustbeviral/node_modules

# Copy source code
COPY --chown=nextjs:nodejs . .

# Build the application
WORKDIR /app/mustbeviral
RUN npm run build && \
    npm prune --production && \
    rm -rf /tmp/* /var/tmp/* .next/cache

# ===================================
# Stage 4: Production Runtime
# ===================================
FROM base AS production

WORKDIR /app

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/server.js ./
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./
COPY --from=builder --chown=nextjs:nodejs /app/mustbeviral/dist ./mustbeviral/dist/
COPY --from=builder --chown=nextjs:nodejs /app/mustbeviral/package.json ./mustbeviral/
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/mustbeviral/node_modules ./mustbeviral/node_modules

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R nextjs:nodejs /app/logs /app/tmp

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Create optimized startup script
RUN echo '#!/bin/sh\n\
set -e\n\
echo "ðŸš€ Starting Must Be Viral V2 (Optimized)"\n\
echo "ðŸ“Š Memory: $(cat /proc/meminfo | grep MemAvailable | awk '"'"'{print $2}'"'"') KB available"\n\
echo "ðŸ’¾ Disk: $(df -h / | awk '"'"'NR==2 {print $4}'"'"' available)"\n\
echo "ðŸ”§ Node: $(node --version)"\n\
echo "âš¡ Environment: $NODE_ENV"\n\
exec node server.js\n' > /app/start-optimized.sh && \
    chmod +x /app/start-optimized.sh

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]
CMD ["/app/start-optimized.sh"]

# Labels for container management
LABEL maintainer="Must Be Viral Team <team@mustbeviral.com>" \
      version="2.0.0-optimized" \
      description="Must Be Viral V2 - Optimized Production Build" \
      org.opencontainers.image.title="Must Be Viral V2 Optimized" \
      org.opencontainers.image.description="Optimized production build for enterprise deployment" \
      org.opencontainers.image.version="2.0.0" \
      org.opencontainers.image.authors="Must Be Viral Team" \
      org.opencontainers.image.url="https://mustbeviral.com" \
      org.opencontainers.image.licenses="MIT"